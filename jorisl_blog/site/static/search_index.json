[{"title":"Skull rules","description":"\"Rules for the card game Skull.\"","tags":["rules","standard 52-card deck"],"slug":"gamerules-skull-rules","html":"The quintessence of bluffing. Overview Skull is a bluffing and deduction party-game, best played with 5 or 6 players. The first player to with 2 bets, or the last player with any cards remaining, wins the game. Players: 4-6 (best 5-6) Prerequisites: 1 deck of cards Play time: 20 minutes Setup Each player gets 3 red-colored number cards, known as roses, and 1 black-colored face card (Jack, Queen, or King), known as skulls. Choose a starting player. Start of a round At the start of a round, each player chooses one of their cards an places it face-down in front of them. Player turns On a players turn they can choose to either: Play a card. This card must be placed on top of any previous cards they played this round. Make a bet. When a player makes a bet, they announce a number of cards they can reveal without encountering a skull. After a player has made a bet, no one can play any other cards. They can only choose to pass or raise the bet. Betting continues until all other players have passed; the highest bidder the attempts to reveal the declared number of cards. Revealing cards The highest bidder must reveal cards. They must first reveal cards from their own pile, after which they can reveal cards from the other players piles. When revealing a card, the top most card of the chosen pile is revealed; earlier played cards in a pile can only be revealed by first revealing the cards above. If the bidder reveals a skull they stop immediately. If the skull is in their own pile, they take back all of their cards (not yet lost in a previous round), and choose 1 card to remove. If the skull is in another players pile, they take back all of their cards, shuffle them with their hand cards, and let the player whose skull was encountered discard a card by random. Cards are removed from the game face-down, e.g. only the person whose card it was knows which one was removed. If the bidder was able to reveal the declared number of cards without encountering a skull they get 1 point. Use a token (preferably a distinct object, but one of the non-used cards like Aces or Jokers also work) to show if a player has a point. If the bidder wins the bid, they start the next round. Otherwise the round is started by the player whose skull was revealed (can also be the bidder). Unrevealed cards are returned to their owners hand, without revealing them to the other players. End of the game Once a player acquires 2 points they win the game. Otherwise, if a player is the only player left with any cards they also win the game. Closing words See this video from Tom Scott for a nice gameplay example of this game."},{"title":"Blindsolving cheat sheet","description":"\"Cheat sheet for 3x3 and 4x4 blindsolving.\"","tags":["cheat sheet","blindsolving","rubiks"],"slug":"reference-blindsolving-cheat-sheet","html":"Link to PDF cheat sheet"},{"title":"Schnapsen rules","description":"\"Rules for the card game Schnapsen.\"","tags":["rules","standard 52-card deck"],"slug":"gamerules-schnapsen-rules","html":"A 2-player trick taking game. Overview Schnapsen is a trick taking game for 2 players consisting of multiple rounds, where in each round players are racing to be the first to score 66 points. Points during a round are awarded based on the card scores (face value for number cards, 11 points for aces) and for declaring a marriage, which is a 3 and 4 of the same suit. Multiple rounds are placed until a player reached 7 points worth of rounds. Players: 2 Prerequisites: 1 deck of cards (20 cards, using 2, 3, 4, 10, and Aces) Play time: 30 minutes Gameplay Round setup At the start of each round, both players are dealt 5 cards. Use the 10 remaining cards to form the draw pile, and tuck 1 of these cards face-up underneath the other 9 cards. The face-up card determines the trump suit this round. Tricks Tricks are played using the following rules: The first trick in a round is lead by the non-dealer. Later tricks are lead by the winner of the last trick. Highest card of the trump suit wins the trick. If no trump is played; the highest card of the leading suit wins the trick. Players do not have to follow suit. Once the draw pile is exhausted or closed the following additional rules apply: Players must follow suit, and play a higher card in that suit if possible. If players can't follow suit they must play a trump, if able. After a trick is played, both players draw a card from the draw pile into their hand. The winner of the trick draws first and then the loser of the trick; e.g. when there's only 2 cards left the loser draws the face-up trump card. Won tricks are kept face-down by its winner; neither player may look at those cards later during the round. The lead player may, before playing a card, exchange the trump, meld a marriage, and/or close the draw pile. Exchanging trump While the draw pile is not exhausted or closed, and the leading player has the 2 of the trump suit in hand, that player may exchange that card with the face-up card in the draw pile. This exchange must be performed before starting the trick, and this exchange may be done at the start of the first trick. Melding a marriage If the leading player has a 3 and 4 of the same suit in their hand, they can declare a marriage by showing both cards. If these cards are from the trump suit that player scores 40 points, and 20 points if from another suit. The player must then lead that trick using either of the 2 cards. A marriage can be declared during any point in the round, but the points will only be given to that player if/when that player wins at least 1 trick that round. E.g. if a player ends the round without any tricks won, than that player doesn't get any points from declared marriages. Closing the draw pile If the leading player thinks they can reach the required 66 points using cards left in their hand, they may choose to, at the start of their turn, to close the draw pile by turning over the face-up trump card. Once this has been done, neither player draws any cards at the end of a trick, and the stricter rules apply for playing cards in a trick. When the draw pile is closed, the non-closing player counts and records their current score. Ending the round The round ends when neither player has cards left to play. Scoring is dependent on if the draw pile was closed during the game. If the game was played without closing the draw pile, then the winner of the last trick wins the round, with the round being worth 1 point. If the draw pile was closed, and the person who closed the draw pile has 66 or more points, then that player wins the round. The round is worth points dependent on the score of the other player once the draw pile was closed. 3 points if the non-closing player had 0 points. 2 points if the non-closing player had 32 points or less. 1 point if the non-closing player had 33 points or more. If the player who closed the draw pile is not able to reach 66 points, the non-closing player wins the round: If so, the round is worth: 3 points if the non-closing player had 0 points when the draw pile was closed. 2 points otherwise. Play continues until a player scores at least 7 points worth of rounds. #$ Closing words Schnapsen is traditionally played with Jack, Queen, King replacing the 2, 3, 4 cards respectively. Using this convention the concept of marriages are easier to understand, since this then happens with a trick consisting of a King and Queen. However, the card score values are more difficult to grasp, especially since the point values and ranking order for the face cards differ from most conventional card games. Therefore I like to teach and play this game using 2, 3, and 4 instead. Sixty-six is a card game almost similar to Schnapsen. The main differences are that the 9's are also included, worth 0 points, and that each player has a hand of 6 instead of 5 cards. When playing Sixty-six, it is likely easier to use the standard convention of Jack, Queen, and King cards, since with the 9 included, cards are not worth their face-value anyway. (or the face-card convention can be used, with the Jack included as the 0 card)."},{"title":"Whist rules","description":"\"Rules for the card game Whist.\"","tags":["rules","standard 52-card deck"],"slug":"gamerules-whist-rules","html":"A 2-player trick taking game. Overview Whist is a 2-player trick taking game played in 2 phases. During the first phase the players try to win tricks in order to draft the cards that weren't dealt at the start of the game. During the second phase the players try to win the most tricks. Players: 2 Prerequisites: 1 deck of cards (52 cards, without jokers) Play time: 15 minutes Setup Decide which player will start the game. Shuffle all cards, and deal 13 to each player. Place the remaining 26 cards face down as the stock, and flip over the top most card. The suit of this card is the trump suit for the remainder of the game. Phase 1: drafting During the first half of the game, the players try to draft the best cards from the stock. Standard trick-taking rules apply: The leading player plays a card from their hand. The other player must follow suit, if possible. Otherwise they may play any card from their hand. The winner of the trick is determined by: The highest card of the trump suit. If no trump suit is played; the highest card of the leading suit. The winner of the trick leads the next trick. The person who won the trick gets the top (open) card of the stock. The other person gets the card below, without showing it to the other player. Cards received during this phase directly get added to the players hand, and can be used in either phase. The top card of the stock is revealed for the next trick. Play continues until the stock is depleted. All cards played in tricks during this phase are set aside. Phase 2: scoring During this phase the players continue playing tricks until their hands are depleted (13 tricks in total). The winner of the game is the player who scored the most tricks during this phase of play. Closing words Claim is a modern designer card game with gameplay similar to Whist; 2-player trick taking with a drafting and scoring phase. Fox in the Forest is another enjoyable modern designer 2-player trick taking game."},{"title":"Pixies solo rules","description":"\"Solo rules for the card game Pixies.\"","tags":["rules","solitaire"],"slug":"gamerules-pixies-solo-rules","html":"Pixies Solo Rules These rules are based on the Breeze solo mode by Michiel de Wit. Overview In this solo mode, you play a 2-player game against a bot. As normal, 3 rounds are played, each with different scoring for connected zones. The bot doesn't make a 3x3 area, but gathers cards in a single pile, with its own scoring rules. From the players perspective, the round sequence is the same as for a normal 2 player game, except for the 4 cards being drafted must be put from left-to-right when revealed. A round ends when the player has no open slots left over. Bot turn During the bot's turn: Take the card with the highest number from the drafting pool, with the leftmost card winning ties. If there are still 2 or 3 cards left in the drafting pool, put the taken card face up on the bot's pile. Otherwise discard the card face-down in a discard pile. Bot scoring Go through the bot's (face up) pile, and calculate the score as follows: Add up all card values, as if all cards where validated. Add up all positive and negative points printed on the cards as normal. See what color the bot has most (taking multi-colored cards into account), and calculate the largest color zone (2, 3, or 4 points per card, depending on round) as if these cards where all connected."},{"title":"Jellybean parts & useful components","description":"\"Reference for common and useful parts for use in electronics design.\"","tags":["electronics"],"slug":"reference-jellybean-parts-useful-components","html":"This is my personal reference for jellybean parts and other usefull electronic components. This list is mostly focussed on hand-solderable surface mount components. Sources: Art of Electronics, Third Edition EEVBlog The Knowledge Accelerator ... This post was last edited 2025-07-28. Resistors Fixed value Any resistor in E24, E48, E96, or E192 series (lower preferred). Package Voltage Power 0402 50V 63mW 0603 75V 100mW 0805 150V 125mW 1206 200V 250mW Variable Bourns 3386 9mm square single turn, 0.5 W Bourns 3296 9mm square multi turn, 0.5 W Diodes Part # Type Current rating Max voltage Voltage drop Leakage current Capacitance Package Comments RS1M Silicon 1A 1000V 1.3V @ 1A 5µA @ 1000V 15pF SMA 1N4148W Silicon 150mA 75V 1V @ 10mA 5nA @ 20V 4pF SOD123 BAT54 (A,C,S suffixes) Schottky 200mA 30V 800mV @ 100mA 2µA @ 25V 10pF SOT23 variants for 2 diodes in 1 package 1N5819HW Schottky 1A 40V 400mV @ 1A 10µA @ 32V 150pF SOD123 SS54 Schottky 5A 40V 550mV @ 5A 1mA @ 40V 500pF SMC MOSFETs nMOS Part # Voltage rating Drain current Resistance Threshold voltage Package Comments 2N7002 60V 100mA 2.5Ω 1V ... 2.5V SOT23 BSS138 50V 250mA 1Ω 0.8V ... 1.5V SOT23 BSS123 100V 170mA 1.3Ω 0.8V ... 2V SOT23 FDN337N 30V 1.3A 70mΩ 0.4 ... 1V SOT23 pMOS Part # Voltage rating Drain current Resistance Threshold voltage Package Comments BSS84 50V 130mA 3Ω -0.8V ... -2V SOT23 NDS332P 20V 700mA 350mΩ -0.4V ... -1V SOT23 BJTs NPN Part # Voltage rating Drain current Base-emitter on Gain Package Comments MMBT3904 40V 200mA 0.65V ... 0.95V 30 ... 100 SOT23 MMBT2222 40V 600mA 0.6V ... 2.6V 35 ... 100 SOT23 FMMT617 15V 3A 0.8V ... 1V 80 ... 400 SOT23 2N3055 100V 15A 1.5V 5 ... 80 TO3 PNP Part # Voltage rating Drain current Base-emitter on Gain Package Comments MMBT3906 -40V -200mA -0.65V ... -0.95V 30 ... 100 SOT23 MMBT2907 -60V -600mA -0.4V ... -2.6V 50 ... 100 SOT23 FMMT617 -12V 2.5A -0.8V ... -1V 45 ... 475 SOT23 Opamps LM358 industry-standard dual opamp LMV358 low-voltage rail-to-rail CMOS opamp TL0xx FET input opamp OP07 precision opamp Comparators LM393 dual comparator LMVLM2903 dual low-voltage comparator TS3021 single high-speed rail-to-rail low-voltage comparator Regulators &amp; refereces 1117 adjustable &amp; fixed LDO regulator μA78xx fixed voltage regulator LM317 adjustable voltage regulator TL431 adjustable voltage reference LM4040/LM4041 adjustable voltage reference REF01 precision voltage reference Timers 555 LTC699x &quot;TimerBlox&quot; Connectors DSUB Molex Mini-fit Molex Micro-fit ... Switches &amp; buttons Omron B3F Other CD4051/CD4052/CD4053 Analog Multiplexer Switch"},{"title":"Loot the Loop rules","description":"\"Rules for the card game Loot the Loop.\"","tags":["rules","solitaire","standard 52-card deck"],"slug":"gamerules-loot-the-loop-rules","html":"Rules taken from the Isaludo solo collection Components A standard 52-card deck with one joker. Aces are jewels you're trying to loot. Number cards (2-10) are minor trinkets in the temple. Face cards are traps you must avoid, while the Joker is the temple exit. Setup Cut the deck in 3 equal face-down piles, flip over the top 2 cards for each pile, and stack the piles back in your chosen order. Hold this deck in your hand. Leave space on the table for 3 cards (your notes) and a score pile. Gameplay The game is played over a series of turns. Each turn, you must perform exactly one of the following four actions. What actions are allowed depends on the top or top two cards of the deck. Action Can only be performed if... Look Around The top card of the deck is face down Explore Either or both of the top two cards in the deck are face-up number cards (trinkets) Mark a path The top card of the deck is a face up number card (trinket), and you have less than three cards in your notes Return to a marked path You have at least one marked path in your notes Look Around Turn the top two cards of the deck face up, careful to maintain their order. If the second card of the deck is already face up, just flip the top card and leave the second one as is. You may ONLY perform this action if the top card of the deck is face down. Explore If either or both of the top two cards in the deck are face-up number cards (trinkets), choose one of those cards' values. Count exactly that many cards from the top of the deck and move them to the bottom, maintaining their order. Include the aforementioned top two cards in the count. If there is only one face-up number card among the top two cards of the deck, you may only travel by that count. If neither of the two top cards of the deck are face up number cards, you may not use the explore action at all. Each time you explore, after you move the required cards to the back, take note of the new top card of your deck. This is the room you land in. If it is a face-down card, nothing happens. If it is a face-up face card (trap), you lose the game. If it is a face-up ace (jewel) or trinket (number card), you nab it! You must move that card to your score pile. If it is a face-up joker (exit) and you have all four aces in your score pile, you exit the temple and end the game. Otherwise, nothing happens. Mark a Path If the top card of the deck is a number card (trinket), remove that card from the deck and place that card face up in front of you on the table in your notes. You can mark a maximum of three paths at any one time. Remember that treasures you land on are removed from the temple, so the longer you stay the greater the density of traps! Return to a Previously Marked Path Return a path card of your choice from your notes to the top of the deck, face up. Marking paths and returning to paths changes the top cards of your deck, and is the primary way to manipulate movement options when trying to land on specific cards. Remember that marking and returning are separate actions. If your notes are already full, you can't &quot;swap&quot; a saved note and the top card of the deck. Game End Continue exploring the temple and hunting for the jewels (aces) and exit (joker). If you get stuck in the temple and can't move, or all movement choices you have will land you on a trap, you lose the game. If you land on the face-up exit after an explore action, check your score pile. If you already have all four jewels, you immediately escape the temple and win the game. Your score is the total number of cards in your score pile, including trinkets. Other notes Even with all aces and joker face-up, it can be interesting to stay in the temple to gather more trinkets. You are free to look through the deck and all its face up cards at any time. You may even count cards to plan routes. You may not look at any face down cards, however. When traveling, it’s helpful to first count off the total number of cards to move with your thumb, then transfer the whole block of cards to the back. It's easier than doing it one by one."},{"title":"Sea Salt & Paper solo rules","description":"\"Solo rules for the card game Sea Salt & Paper.\"","tags":["rules","solitaire"],"slug":"gamerules-sea-salt-paper-solo-rules","html":"Sea Salt &amp; Paper Solo Rules These rules are based on the solo rules by @EricKenneth. Overview In this solo mode, you play a 2-player game against a bot. This game consists of a single round, where you can stop the round once you reach 12 points. The bot's actions are determined by a d6 dice, and this dice also limits the actions on your turn. The bot does not play cards, but gathers them in a face-down pile. It's score is determined using special scoring rules. Setup Place a mermaid card sideways representing the bot. Its cards will be placed right below it. Place a d6 on the mermaid area for now. Place the deck and the two discards as usual to the right of the mermaid's area. Special rules The player always starts the game. Whenever a discard pile is empty, immediately fill it with the top card of the deck. The player can't choose to draw from a pile if the dice is on that pile (taking a card from that pile using the crab action is allowed). When playing the swimmer-shark combo, shuffle the bot's pile and take a random card. When playing the swimmer-jellyfish combo, the bot takes the top card from the draw pile in its turn. The dice does not change position. Bot's turn During the bot's turn: Roll the dice, and put the top card from the corresponding pile face down on the bot's pile. 1 or 2: deck. 3 or 4: first discard pile. 5 or 6: second discard pile. Place the dice on the pile the card was taken from. Ending the game Once the player reaches 12 points, they can choose to end the game. Then take a final turn for the bot. Scoring Scoring for the player is according to the standard rules (without last-chance scoring). To count the bot's score: Make as many duo-card pairs as possible, adding sea stars if possible. Count score using the standard rules, also including the mermaid card representing the bot. Add 1 point for every single duo-card."},{"title":"Gridcannon rules","description":"\"Rules for the card game Gridcannon.\"","tags":["rules","solitaire","standard 52-card deck"],"slug":"gamerules-gridcannon-rules","html":"Rules taken from here Setup Start with a shuffled deck, including jokers. With the deck face-down, draw cards from the top and lay them out face-up in a 3×3 grid. If you draw any royals, aces or jokers during this, put them on a separate pile and keep drawing til you have made the grid of just number cards. If you did draw some royals, you now place them the same way we will when playing: put it outside the grid, adjacent to the grid card it is most similar to. ‘Most similar’ means: Highest value card of the same suit If none, highest value card of the same color If none, highest value card If there is a tie, or most similar card is on a corner, you can choose between the equally valid positions Any aces and jokers you drew during set up, keep them face-up to one side. These are Ploys you can play whenever you like, rules below. Once you have a 3×3 grid of number cards, you may choose one to replace if you like: put it on the bottom of the draw pile and draw a new card to replace it. The goal Find and kill all the royals. Play Draw the top card from the deck. If it is a royal: use placement rule above. If it has value 2-10: you must place it on the grid. It can go on any card with the same or lower value, regardless of suit. If it is an ace or joker: keep it to one side, see Ploys. Killing royals: if you are able to place a card on the grid opposite a royal – so there are two cards between – those two cards Attack the royal. The sum of their values must be at least as much as health of the royal to kill them: if it is not, you can still place the card, but the royal is unaffected. The value of the card you just placed is not part of the Attack, only the two between. Jacks: 11 health. The cards Attacking can be any suit. Queens: 12 health. The cards Attacking must match the color of the queen to count. Kings: 13 health. The cards Attacking must match the suit of the king to count. If you killed the royal, turn it face down but don't remove it – new royals you draw still cannot be placed in that spot. Once every spot around the grid has a dead royal in it (12 total) you have won. Ploys: Aces are Extractions: at any time you can use up one of the aces you have drawn to pick up one stack of cards from the grid and put them face-down at the bottom of your draw pile. You can do this even after drawing a card and before placing it. Turn the ace face-down to remember you have used it. Jokers are Reassignments: at any time you can use up one you have drawn to move the top card of one stack on the grid to another position. The place you move it to must be a valid spot to play the card, and placing it can trigger an Attack the same way a normal play can. Turn the joker face-down to remember you have used it. If you cannot place a card: and you have no Ploys to use, you must add the card as Armour to the royal it is most similar to (lowest value royal of same suit, failing that lowest of same color, etc). It increases their health by the value of the card. So a King with a 3 as armor now has 13 + 3 = 16 health. You can add armor to a royal that already has armor – it stacks. If a royal ends up with 20+ health (or 19+ for a King), that is a natural loss as there is no longer any way to kill them. If there are no living royals on the table: if every spot around the grid has a dead royal on it – all 12 – you have won! If not, just keep drawing cards until you find a royal, placing the cards in a face-up pile as you go. Once you find a royal, place it, then add the cards you cycled through to the bottom of your deck. If the draw pile runs out: and you have not killed all the royals, use any ploys you have left to fix the situation if you can. If you are out of both cards and ploys and not all royals are dead, you have lost. Scoring If you have killed all the royals without running out of cards, your score is how many Ploys you have left unspent. So the maximum score is 6."},{"title":"Le Truc rules","description":"\"Rules for the card game Le Truc.\"","tags":["rules","standard 52-card deck"],"slug":"gamerules-le-truc-rules","html":"Le Truc A bluffing &amp; trick taking game with only 3 cards per hand. Overview Le Truc is a small bluffing &amp; trick taking game where players (or teams) race to 16 points. Players: 2 or 4. Prerequisites: 1 deck of cards, only 32 cards (remove all 2-6 and joker cards). Cards are ranked (high to low): A-K-Q-J-10-9-8-7. Something to keep score (pen &amp; paper, chips, coins, etc.) Optional: backgammon doubling cube. Play time: 20 minutes. Gameplay At the start of each round the dealer deals 3 cards to each player. The leader of the first trick is the player left of the dealer. The leader of the first trick may propose, after cards have been dealt, a re-deal. If the dealer agrees the hand is re-dealt. Each trick, the leader plays a card, with the other players following in clockwise order. Unlike most trick taking games, Le Truc is suit-less. Therefore a player can play any card and the highest card wins, irregardless of suit. The winner of a trick starts the next trick. Before playing a card, that player can increase the bet, see Betting below. This may be done before playing their first card. If the highest cards are tied, no one wins the trick. A player or team wins the round when they win the majority of tricks. If a player or team wins the first 2 tricks, the 3rd trick is not played out, and all remaining cards are shuffled back into the deck without reveal to the other players. If both players or teams win the same number of tricks, then no points are scored this round. Betting By default, each round is worth 1 point. Before a player plays their card they are allowed to double the current value of the round. If the other player or team accept the point value of the round is doubled (e.g. 2, 4, 8, 16). If the other player or team declines, the player offering to double scores the current game worth, and the round ends immediately (returning all left over cards to the deck without reveal). Once a bet has been accepted in a round, only the player or team who accepted the last bet that round can offer to double again. Note: these betting rules are similar to those from the doubling cube in Backgammon. Team play When playing in teams, the partners sit opposite of each other. Open communication between team members is allowed, as long as it can also be heard by the opposing team."},{"title":"Nine Card Golf rules","description":"\"Rules for the card game Nine Card Golf.\"","tags":["rules","standard 52-card deck"],"slug":"gamerules-nine-card-golf-rules","html":"Nine Card Golf Players draw and discard to minimize the total value of their tableau of 9 cards. Overview The game is played over 4 rounds, where in each round each player tries to get as few points as possible. Players: 2+ Prerequisites: 1 deck of cards (52 cards + 2 jokers) per 2-3 players Something to keep the running score for each player Play time: 15-20 minutes Setup Shuffle all cards (including jokers) and deal out 9 cards face down to each player. Players arrange their cards in a 3x3 grid, keeping the cards face down. Place the remaining cards as a draw pile in the center of the table, and flip over 1 card to start the discard pile. Choose a player to start the first round. On subsequent rounds, the player who scored the most points in the prior round is the starting player. Each player flips over 3 cars of their choosing in their grid, without looking at the other cards. Actions A player chooses one of the following actions in their turn: Draw and look at the top card of the draw pile. The player then chooses either to: Replacing one of their grid cards with the drawn card, discarding the replaced card. Discarding the drawn card, after which the player may choose to flip one of the face-down cards in their grid. Replace one of their grid cards with the top card of the discard pile, discarding the replaced card. Either a face-down or face-up card can be replaced, but the new card is always played face-up. Discarded cards are always placed face-up on top of the discard pile. When a player reveals all cards in their grid, all other players get 1 additional turn, after which the round is scored. Scoring Each player first flips over their face-down cards, if still remaining. Then each player scores using the following rules: Aces are worth 1 point. Numbered cards (2-10) are worth their face-value. Jacks and Queens are worth 10 points. Kings are worth 0 points. Jokers are worth -2 points. If a card is orthogonal adjacent with a card of the same value, it scores 0 points instead. A set of 4 same-valued cards in a 2x2 block score -10 points. If the player who ended the round (first to reveal all cards in their grid) did not get the lowest score this round, they get a +10 point penalty. Players keep a running count of their scores over multiple rounds. The player with the lowest total score wins. Closing words As with most classic card games, there are many variants of the card game Golf, see Wikipedia. Nine-card golf, using rules as explained on this page, is my preferred way to play. In my opinion this game works bests as a 2-player game, because of: The speed of play. High importance to not only care for your own grid, but also to prevent throwing away cards the opponent can use. The use of a single-card deck causes fewer opportunities making sets of cards, leading to more strategic decisions and less chance. The game Skyjo is a modern implementation of the Golf family of card games, suitable for 2-5 players."},{"title":"The Emissary rules","description":"\"Rules for the card game The Emissary.\"","tags":["rules","solitaire","standard 52-card deck"],"slug":"gamerules-the-emissary-rules","html":"Rules taken from the Isaludo solo collection. This game holds the core of the game For Northwood. Components A standard 52-card deck without jokers. Setup Separate the 9s and 10s (kingdoms) and place these eight cards face down in a row (they're just placeholders; the value doesn't matter). Separate the twelve face cards. Shuffle the Kings and Queens together (rulers) and deal them face up from left to right, one on top of each kingdom. Set the four Jacks aside in a stack; these cards represent you and your advisors. Shuffle the remaining 32 cards into a face-down deck. Objective In The Emissary, you are a young noble sent by your father to gather support from eight neighboring kingdoms. In each kingdom, you engage in a series of debates with their ruler. Using the right amount of force and deference, you must win exactly a certain number of debates per kingdom. Succeed and you may call upon the ruler for future support; fail even once and lose the game. Gameplay The core game loop consists of 1) visiting a kingdom and 2) playing out a series of debates in that kingdom against its ruler. Choosing the kingdom to visit Draw eight cards from the deck. Review the cards in your hand, then choose which kingdom to visit. Place your stack of advisors under that kingdom to mark that you're visiting. You must visit each kingdom once and only once per game. The position of that kingdom along the line determines how many debates you must exactly win to get support from that ruler. The leftmost royal needs one win, the next two, and so on. You must win eight debates in the rightmost kingdom. The ruler's suit represents their favorite topic; for this kingdom, this suit trumps all other topics of conversation. Once you have chosen a kingdom to visit, you now play out the series of debates. The Debates Place the top card of the draw deck face-up into a discard pile. The ruler is now talking about a topic - you must respond! Play a single card from your hand in response. Playing a card follows standard trick-taking rules: You must play a card in your hand with the same suit (topic) as the ruler's card if you are able. If and only if you cannot follow suit, you may play any card. You win the debate if either: You played a higher card of the same topic (suit), or The debate card isn't of the ruler's favorite topic and you responded with any card of their favorite topic. Way to go, you suckup. Aces are low and have value 1. If you win the debate, place the card you played in a separate scoring pile. If you lose the debate, instead place your card in the discard pile as well. Keep engaging in debates until you run out of cards in your hand. Once your hand is empty, the number of cards in your scoring pile shows how many debates you have won for that kingdom. Advisor Abilities To help control the number of debates you win, each of your Jack advisors has a special ability you can activate, once per kingdom. Before the first debate or between any two debates, you may choose to activate advisor abilities by turning a face-up Jack face down. (Activate it before the ruler card is dealt; you can't use abilities 'in response'). It's up to you whether you want to use abilities earlier when you have more cards in hand, toward the end, or a mix of both. Resolve each ability fully before deciding to use another one. The ability depends on the suit of the card used: Hearts (diplomacy) - Discard all cards in your hand that match the current kingdom's trump suit. Clubs (military) - Draw a card for each club in your hand. Spades (politics) - Swap the current ruler with the ruler of an unvisited kingdom. (This changes the trump suit for all debates of this kingdom moving forward, and also for that other kingdom when you visit it). This ability does nothing when you're visiting the final kingdom. Diamonds (commerce) - Draw two cards, then choose and discard two cards from your hand. Hearts and clubs abilities change the number of cards in your hand, and therefore change the total number of debates you need to play in a kingdom. The target win number remains the same, however. If you run out of cards in the draw pile, shuffle the discard pile and continue using it. When you run out of cards in your hand, if you have won exactly the number of debates equal to the kingdom's number, congratulations! Add that ruler face up beneath your advisors. In future kingdoms, you may also turn a supporting king or queen face down to use their suit's ability. The only difference is that unlike Jacks whose abilities you can use once per kingdom, kings and queens are one-time-use abilities. They're still very useful in a pinch, though. Shuffle all the cards in the discard, scoring pile, and draw deck together. Turn all spent Jacks back face up (not kings and queens), draw eight new cards, and choose the next kingdom to visit. Ending the game Continue visiting the kingdoms one by one, convincing (and leveraging) allies as needed. If you end any kingdom without winning the exact number of debates needed, you lose the game. Note that the central kingdoms are slightly easier, with kingdom 1 and 8 being very hard to win. Grab support before attempting these, and approach them when you're dealt a favorable hand! If you get support from all eight kingdoms, you win the game. Whether you win or lose, your score is the number of kingdoms won plus the number of supporting kings/queens with unused abilities, for a perfect score of 8+8=16 points."},{"title":"Ricochet Poker rules","description":"\"Rules for the card game Ricochet Poker.\"","tags":["rules","standard 52-card deck"],"slug":"gamerules-ricochet-poker-rules","html":"Poker without bluffing. Overview Ricochet poker is a form of poker without bluffing, and with an emphasis on calculating odds and pressing luck. During a round, all players ante an then receive a portion of their poker hand. The player with the lowest poker hand either chooses to buy more cards or fold. The player with the best hand at the end of the round wins the pot. Players: 3-6 Prerequisites: 1 deck of cards (52 cards, without jokers), ranked aces-high. Chips, coins, etc. Play time: ? Setup Each round starts with all players making an ante of 1 chip. Then each player receives 1 card, face up. The person with the lowest poker hand hand (e.g. lowest card at the start of the round) acts first. Suits are ranked in alphabetical order, from low to high: Clubs, Diamonds, Hearts, Spades. Gameplay On a players turn, they either fold or buy cards. If a player folds, they step out of the round. If a player buys cards, they first announce how many they want to buy, and put that many chips in the pot. Players may only buy cards up to a total hand size of 5 cards. The dealer will give the cards, face-up, stopping directly when the hand is not the lowest hand anymore. Note: it can be that the player therefore received fewer cards than bought for. If a player buys cards and still has the lowest poker hand after receiving their bought cards, that player is out of the round. After every turn the action moves to the player with the lowest hand. Play continues until there's 1 player left, or if there is a tie for the best hand. Breaking ties A hand with a kicker beats a hand without (for example, a King+3 hand beats a hand of a single King, but a King+8 beats a King+3). Suits are used to break ties given identical hands. In the final hand, suits are not used to break ties; only to determine the next player in turn. If at the end of a round 2 or more players are tied, the pot is split."},{"title":"Bourré rules","description":"\"Rules for the card game Nine Card Golf.\"","tags":["rules","standard 52-card deck"],"slug":"gamerules-bourre-rules","html":"Bourré A trick taking gambling game. Overview Players try to win more tricks than any other single player to win the pot, and try to win at least 1 trick to not match the pot. Players: 3-8 (best with 5-7) Prerequisites: 1 deck of cards (52 cards, without jokers), ranked aces-high. Chips, coins, etc. Play time: ? Setup Each player antes 1 chip in the pot, and is dealt 5 cards. The last card dealt to the dealer is flipped open and placed in front of the dealer; this is the trump suite this round. Starting left from the dealer, each player decides if they stay in or fold. If a player folds, they place their hand cards face-down in front of them. They cannot longer win the pot on that deal, nor lose any additional chips. If a player stays, they can decide to discard up to 5 cards face down (up to 3 when playing with 7 or 8) and drawing that amount of cards from the unused portion of the deck. Players may not announce or gesture indicating whether they intend to play or not or how many cards they might exchange, before it is their turn to act. If there are no more cards remaining in the deck to exchange cards, the dealer gathers all discarded cards and shuffles them to form the new deck. If the flipped card is an ace, the dealer must play. The dealer is allowed to exchange their flipped over card. If so, set this card aside face-up. This card still determines the trump suit. If only 1 player elects to stay, that player is deemed to have won all tricks that round. The player left of the dealer starts the first trick. In subsequent rounds, the trick is started by the player who won the previous trick. Trick taking The leading player plays a card, after which the other players play a card in clockwise order. The trick is won by whoever played the highest card of the trump suit, or if none of the trump suit was played the highest card of the leading suit. The play of cards are governed by these rules: Players must follow suit, if able. Players not able to follow suit must play a trump card, if able. Subject to the previous rules; a player must play a card that would, currently, win the trick, if able. If a player neither has cards of the leading suit nor trump suit, they may play any card from their hand. Note: these rules have more restrictions than most trick-taking games. If a player is not able to play a card that would win them the trick they may choose themselves which card to play, given the rules to play the lead suit or trump suit if not able. The dealer's flipped over card is treated as one of their 5 hand cards and can be played at any time, given the rules stated above. A player who is sure to win 3 tricks irrespective of how the cards are played, and therefore is certain to win the pot, has the following additional restrictions. If it is their turn to lead, they must lead with their highest trump. If they are playing in a trick lead by another player, and not being the last one to play in that trick, they must play there highest trump if able (if allowed by the standard rules stated above). Payments The player who wins the most tricks wins the pot. If multiple players are tied for the most tricks then no one takes the pot - it remains for the next deal and the new antes and penalties are added to it. Any player who takes no trick is said to have gone &quot;bourré&quot;. These players must each pay an amount equal to the whole contents of the pot. These payments form part of the pot for the next deal. Players who have gone bourré and players who were tied for the most tricks do not pay an ante for the next deal. All other players pay 1 chip ante as usual. These payments are regardless of whether the player continues play in the next round. Deal then passes to the left. If a player plays a card not in accordance to the rules, and this is not fixed before the next player played their card, that player must forfeit the round and pay as if they have gone bourré at the end of the round. Closing words Due to the quickly growing payments round after round, it can be prefferable to pay with a limit, for example 20 chips. When played with a chip limit, players pay at most that limit when going bourré and the winner can only get that amount out of the pot (keeping the remainder of the pot for the next round). See this video from Shut Up &amp; Sit Down for a short explenation and playtrough of this game."},{"title":"Coup rules","description":"\"Rules for the card game Coup.\"","tags":["rules","standard 52-card deck"],"slug":"gamerules-coup-rules","html":"A game of social deduction, bluffing, and deception. Overview Coup is a social deduction bluffing game, best played with 4 to 6 players. A player wins if they are the last person with any cards remaining. This game is intended to be played multiple times. Players: 3-6 (best 4-6), with variant for 2 players. Prerequisites: 1 deck of cards Optional: coins (tokens, chips, etc.) Play time: 5-10 minutes per round Setup Make a deck out of 3 of each of the following cards: Jack, Queen, King, Ace, 2. Shuffle the deck, and deal 2 cards to each player. The remaining cards are used as coins, if no other kind of tokens are available. Give each player 2 starting coins. The cards There are 5 kinds of character cards, each with their own ability. King = Duke Take 3 coins. Blocks foreign aid. Ace = Assassin Pay 3 coins and try to assassinate another players character. Can be blocked by a Contessa. Queen = Contessa Blocks an assassination attempt against yourself. Jack = Captain Steal 2 coins from another player. Can be blocked by a Captain or Inquisitor. Blocks stealing. 2 = Inquisitor Draw one card from the deck, and choose whether or not to exchange it with one of your cards. Shuffle the drawn or exchanged card back into the deck. -OR- Choose a player to reveal one of their cards to you (their choice of which to show). You may force that player to draw a new card and shuffle the revealed card back into the deck. Inquisitor can block stealing. Gameplay During a players turn they can use one of the following actions: Influence: use the ability of one of the character cards. Income: take 1 coin from the pool. Foreign aid: take 2 coins from the pool. Can be blocked by a Duke. Coup: pay 7 coins back to the pool, and choose a player. That player removes one of their cards from their hand. Players are forced to coup if they have 10+ coins. If a player looses a card, either due to coup, assassination, or a bluff call, they place that card face-open in the middle of the table. If a player doesn't have any cards left, they are out of the game for the remainder of the round. Bluffing &amp; deception When a player uses a cards ability, either in their own turn, or as a reaction in someone else's turn, they are not required to have the claimed character; they can bluff that they have that character. Any time a player uses a cards ability, any other player can challenge them. If a player is challenged, they must reveal one of their cards. If the challenged player reveals the claimed card, the player who called on their bluff loses one of their cards. The challenged player shuffles the revealed card back into the deck and draws a new card. If the challenged player reveals another card, that player looses the revealed card. Note: if blocking stealing, the player must declare whether it is blocked using a Captain or an Inquisitor. 2 player variant To play coup with 2 players, I recommend to use the following 2 additional rules Call the Coup When a player performs the coup action, they must name a specific character to kill. If the other player has that character, it is revealed and it dies as normal. If the player does not have that specific character, that player reveals all of their character cards. That player does not loose any of their cards, but the player who called the coup does loose their 7 coins. The player who reviled their hand draws 2 cards from the deck and then chooses 2 cards to shuffle back into the deck. 5 lives each Both players start with 2 characters, as normal. But if a character dies, that player draws a new card. When loosing their 4th or 5th card, that player does not draw any new cards."},{"title":"Planck keyboard cheat sheet","description":"\"Cheat sheet my Planck keyboard keymap.\"","tags":["cheat sheet","keyboard"],"slug":"reference-planck-keyboard-cheat-sheet","html":"Repository: https://github.com/JorisL/Planck_QMK_config"},{"title":"Z3 intransitive dice","description":"\"Using the Z3 theorem prover in Julia to generate 'rock-paper-scissor dice'.\"","tags":["programming","Julia","Z3"],"slug":"z3-intransitive-dice","html":"Link to Jupyter notebook"},{"title":"Munipacking through the highlands","description":"\"Off-road unicycle backpacking through the Scottish Highlands.\"","tags":["unicycling"],"slug":"munipacking-through-the-highlands","html":"Munipacking through the Highlands In 2022 and 2024 I backpacked the East Highland Way and Great Glenn Way respectively on my mountain-unicycle. The Unicyclist forum thread contains lots of pictures I've made during those tours."},{"title":"Writing a simple lisp in LabVIEW and Nim","description":"\"Making my own programming language, first in LabVIEW and then in Nim.\"","tags":["programming","lisp","LabVIEW","Nim"],"slug":"writing-a-simple-lisp-in-labview-and-nim","html":"Learning how to make an interpreter for a custom programming language was a challenge I wanted to do for quite some time. Due to it's simplicity in parsing, and the number of resources available, it was a simple choice to make the custom language a lisp-like language. LabVIEW The first version of my custom interpreter was made in LabVIEW, for the following reasons: LabVIEW is often used at my job, but it had been a while since I programmed in it myself. So I wanted to fresh up my knowledge. There are lots of resources online, which I definitely needed to use, showing how to implement a lisp in a common language (Python, C, etc.). Trying to implement it myself in LabVIEW, which uses a different paradigm than almost all other languages 1, forces me to actually understand what the examples show. LabVIEW is arguably one of the worst (e.g. fun) languages suited for this kind of task. And there are examples of people implementing a lisp in many languages, I didn't yet see anyone who implemented something like this in LabVIEW. In this version of my programming language, I was eventually able to do things as defining functions and applying those functions to data. (do ; get first element from a list (define first (lambda (x) (nth 0 x))) ; get remainder of list after first element (define rest (lambda (x) (nthrest 0 x))) ; insert element at the end of a list (define append (lambda (lst elt) (insert lst (len lst) elt))) ; apply return a list with func applied to each element of lst (define map (lambda (func lst) (do (define lstout (list)) (while (not (= lst (list))) (do (define lstout (append lstout (func (first lst)))) (define lst (rest lst)))) lstout))) (map (lambda (x) (* x x)) (list 1 2 3 4 5 6))) ; returns (1 4 9 16 25 36) However, the implementation of this language needs a lot of recursion, and the number of recursive calls to VI's is severely limited. Therefore the complexity of the program that can run are really limited. Nim After implementing an initial version in LabVIEW, I wanted to make an interpreter that would actually be capable of running 'something'. For this implementation I'd chosen Nim, as it is a relatively high-level, but still quick and compiled, language. This project was a good way of trying out the language. In this version of the language I was able to add some additional functionalities, such as Macro support. Using lisp macro's you are able to add features and structures to the language that can't be implemented as a function during execution. See the snippet below from the 'standard library'; In the Nim interpreter I did not define how it should handle an and or or keyword, and these cannot be implemented as functions2. But using macro's it is possible to define how these can be rewritten as, in this case, an if statement (which in turn is also defined as a macro). (define and (macro (a b) (quasiquote (if (unquote a) (unquote b) nil)))) (define or (macro (a b) (quasiquote (if (unquote a) (unquote a) (unquote b))))) In order to test that my programming language could actually do 'something', I implemented another programming language in it. Note that efficiency was not the main goal of this project 😄3. LabVIEW uses the dataflow programming paradigm, while most languages are instead of procedural, functional, and/or object oriented. ↩ A function always evaluates it's arguments. For example (+ 2 (* 6 7)) first evaluates to (+ 2 42). But in, for example, an and statement, you only want the 2nd argument to be evaluated if the first argument is true. Therefore it is not possible to implement an and statement, among others, as a function. ↩ Eventually I ran a brainfuck interpreter in my brainfuck interpreter in my lisp, and used that to run a brainfuck hello world program. That one took around 24 hours to run. ↩"},{"title":"Helix, Python, and Poetry","description":"\"Setting up the Helix editor and python-lsp-server for poetry projects.\"","tags":["programming","python","helix"],"slug":"helix-python-and-poetry","html":"TL;DR Set up poetry to store its virtual environment within the project root. Install python-lsp-server and black within the virtual environment. Open a terminal session with that virtual environment enabled (.venv/Scripts/Activate). Start the helix editor within that terminal session. Introduction At work I've been developing several small-ish software projects in Python using poetry to manage the different dependencies, virtual environments, etc. for each of those projects. So far I've mostly been using Visual Studio Code to edit these projects, instead of using my old and trusted Emacs config. The main reason for using VS Code was due to difficulties with Emacs to get the Python language server protocol correctly working for those projects. It was quite easy to install and set-up the python-lsp-server with emacs for projects using the main installed Python installation on my PC, but each of these projects had their own python virtual environment with various packages either not installed or with a different version of my &quot;main&quot; Python installation. This caused problems with the LSP server, where it would state multiple errors in my code due to it not being able to find the various packages and libraries used in those projects. With VS Code this wasn't a problem, since it was relatively easy to select either the main Python installation on my PC or the Python installation within the poetry virtual environment. In principle this setup worked for development, but I wasn't entirely happy using it. The editor I mostly used outside of this project was Emacs, which I already set up with a modal editing mode slightly based on Kakoune. While there are several extentions for VS code to add a modal editing mode, they where never really a joy to use. Mostly due to sluggishness and it still feeling like a &quot;hack&quot; on top of a non-modal editor, instead of it beging an integraded experience. Furthermore several functionalities I see as being essential to have in an editor, such as macros, are not available in VS Code. Lately I've been trying out the Helix editor, and so far it has been a joy to use. It is a lightweight, modal, terminal text editor, similar to VIM. But where with VIM you practically need to install mutliple additional packages to make it sort-of usable for day-to-day use (LSP, FZF, surround, etc.), Helix already has most of these functions build-in. And since the editor is build with those integrations from the ground up it is quite a lot easier and straightforward to use. And the default keybindings are, in my opinion, a lot easier to remember and use as those from VIM. Most of the things I also did with Emacs seem to be relatively easy to do with Helix (with some small tweaks, such as using markdown for notes instead of org mode). So, in order to try and transfer my workflow to Helix, I've been trying to set it up with both python-lsp-server and poetry, and it seems I've found a workable solution for my use-case. How to configure the tools Poetry local .venv directory Each poetry project always gets a seperate directory for storing it's Python virtual environment. Thanks to this each project can have different versions of Python and libraries installed without clashing with each other. By default a directory is made in the {cache-dir}/virtualenvs of your PC, but poetry can (and for this trick, should) also be set up to store the virtual-environment data from a project within a .venv folder in the project root. This is done by setting the virtualenvs.in-project within the poetry configuration to true. Activating the virtual environment The .venv folder created within the project root contains scripts in order to activate the virtual environment. See this section in the Python documentation. Within Windows this can be activated by first opening a powershell terminal within the project root and then running .venv\\Scripts\\Activate.ps1. Now, for as long as this terminal is open, the paths to Python and other related binaries and scripts are changed to those kept in the .venv directory. Note that this only counts when running commands within that powershell session. Opening a new powershell terminal parallel to this one, then running Python from that one will use the standard system Python binary. Installing python-lsp-server and other tools within the virtual environment The trick to using LSP with Helix with a poetry project is to run Helix within the powershell terminal after enabling the project's virtual environment. This way, when the Helix process calls tools like python-lsp-server it will use the Python installation as used in the poetry project. Therefore the LSP server also correctly scans the project files with the python packages actually used in the project. But for this to work we now have to install python-lsp-server within the project's virtual environment. The same counts for tools like black. Whilst in the terminal with the virtual environment this can quickly be done using pip install python-lsp-server black, but a better way would be to set up these packages as requirements within the project's pyproject.toml file. Setting up Helix Configure the languages.toml file withing the Helix configuration directory (./config/helix/ or %AppData%\\\\Roaming\\\\helix) to use pylsp as the language server (and if wanted black to be the code formatter), and make sure to not use hard coded file paths for these. Otherwise when hard coded paths are used it will not use the .venv versions when needed. An example of this is shown below12: [[language]] name = &quot;python&quot; language-server = { command = &quot;pylsp&quot; } formatter = { command = &quot;black&quot;, args = [&quot;--quiet&quot;, &quot;-&quot;] } auto-format = true including settings to set a max. line length for both formatting and linting. settings, for example max. line lengths, since these are not read from the poetry's pyproject.toml configuration file. According to the Helix documentation it should be possible to include a languages.toml settings file like above within a project, such that you can have different settings LSP or formatter settings for different projects, but I've not tested that yet. Testing the configuration Helix has a startup option to check if the tools for a certain language are correctly set up: hx --health &lt;language&gt;. When we open a new terminal window and run this command with python as our language we should get something like this: $ hx --health python Configured language server: pylsp Binary for language server: /opt/homebrew/bin/pylsp Configured debug adapter: None Highlight queries: ✓ Textobject queries: ✓ Indent queries: ✘ In this case the found language server binary is the one from our system Python installation. But when this same command is executed from a terminal with the virtual environment enabled we should see this path change to something like .venv/Scripts/pylsp. Usage Now, when we want to edit files from the given poetry project we need to start a terminal in the root folder of the poetry project, and then enable the virtual environment. If we then run hx within that terminal3 it will use the project's pylsp server instead of the system's pylsp server. directory of Helix is now the project's working directory. Now commands like &lt;space&gt; f will only search for files within the project. To make things a bit easier we can make a script or terminal configuration to open a terminal in the project's directory and automatically enable the virtual environment. Within, for example, Windows Terminal, this can be done by creating a new powershell configuration with the project's root as startup path and the followin line as startup command: powershell -noexit .venv/Scripts/Activate.ps1 Now you can just start this configuration, run hx, and start editing. And a 2nd terminal with this configuration can be opened to run and debug the python code. see https://github.com/JorisL/helix for my latest configuration, ↩ This is where we also must configure some LSP and formatter related ↩ An added benefit of running hx within this terminal is that the working ↩"},{"title":"Removing password from protected Excel cells","description":"\"How to remove password protection from protected Excel cells using Emacs.\"","tags":["Emacs","Excel"],"slug":"removing-password-from-protected-excel-cells","html":"Introduction A while ago I received an Excel file where many of the formulas and calculations where locked and made invisible using password protected sheets. The password was lost, making it &quot;impossible&quot; to view the formulas making up the Excel file; only the resulting values. With this password-protected functionality it is still possible to open the file without password. Also; the values in protected cells are still updated when modifying one of the unprotected cells its formula references to. Therefore the formulas behind the cells should also still be unencrypted by a password. A quick search on the internet at the time (stackoverflow, superuser, etc.) did not get me an answer for how I could recover the file. But with a bit of poking-around in the .xlsx file by myself I was able to disable this protection. This post describes how I was able to find and disable this protection. As an example for this post, I've prepared this sheet protected Excel file. This excel file has a single formula in cell A1, but the sheet protection has been set up such that you need to provide the correct password in order to change, or even see the formula behind, the cell. Exploring Excel files After not finding a simple answer for disabling this password protection I went looking around in the .xlsx file myself. One of the things I remembered having read somewhere in the past was that .xlsx files are actually just .zip archives. Therefore, we can just rename the file extention of our .xlsx file to .zip, excract the archive, and explore its contents. For our example file this archive mostly consists of .xml files, describing various parts and properties in the workbook, but for larger Excel files it could also contain various images, videos, and other embedded files. Since this simple example file practically only consists of .xml files it is likely that the info we're looking for is in one of those files. Normally I would edit these in Emacs, and with that program we already have a trick up our sleeve. Emacs has a build-in mode to edit text files within archives, without the need to unarchive the file yourself. This can be used to edit text files in regular .zip or .tar archives, but also in files like Java .jar and Excel .xlsx files which are actually archives with a different file extention. So; let's open our example .xlsx file in Emacs: M Filemode Length Date Time File - ---------- -------- ----------- -------- --------------------------------------- -rw-rw-rw- 1276 1-Jan-1980 00:00:00 [Content_Types].xml -rw-rw-rw- 588 1-Jan-1980 00:00:00 _rels/.rels -rw-rw-rw- 2212 1-Jan-1980 00:00:00 xl/workbook.xml -rw-rw-rw- 690 1-Jan-1980 00:00:00 xl/_rels/workbook.xml.rels -rw-rw-rw- 1480 1-Jan-1980 00:00:00 xl/worksheets/sheet1.xml -rw-rw-rw- 8390 1-Jan-1980 00:00:00 xl/theme/theme1.xml -rw-rw-rw- 2313 1-Jan-1980 00:00:00 xl/styles.xml -rw-rw-rw- 322 1-Jan-1980 00:00:00 xl/worksheets/_rels/sheet1.xml.rels -rw-rw-rw- 5420 1-Jan-1980 00:00:00 xl/printerSettings/printerSettings1.bin -rw-rw-rw- 169 1-Jan-1980 00:00:00 xl/calcChain.xml -rw-rw-rw- 625 1-Jan-1980 00:00:00 docProps/core.xml -rw-rw-rw- 785 1-Jan-1980 00:00:00 docProps/app.xml - ---------- -------- ----------- -------- --------------------------------------- 24270 12 files When opening an .xlsx file in Emacs, it is automatically opened as an explorable .zip file. Here we see the different .xml files representing different parts of the Excel file. In this case the example file only has one worksheet, in xl/worksheets/sheet1.xml. Lets open it to see the information stored for this sheet: &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt; &lt;worksheet xmlns=&quot;http://schemas.openxmlformats.org/spreadsheetml/2006/main&quot; xmlns:r=&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships&quot; xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; mc:Ignorable=&quot;x14ac xr xr2 xr3&quot; xmlns:x14ac=&quot;http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac&quot; xmlns:xr=&quot;http://schemas.microsoft.com/office/spreadsheetml/2014/revision&quot; xmlns:xr2=&quot;http://schemas.microsoft.com/office/spreadsheetml/2015/revision2&quot; xmlns:xr3=&quot;http://schemas.microsoft.com/office/spreadsheetml/2016/revision3&quot; xr:uid=&quot;{2838881A-D7EE-4880-9A40-583A7BEB231B}&quot;&gt;&lt;dimension ref=&quot;A1&quot;/&gt;&lt;sheetViews&gt;&lt;sheetView tabSelected=&quot;1&quot; workbookViewId=&quot;0&quot;/&gt;&lt;/sheetViews&gt;&lt;sheetFormatPr defaultRowHeight=&quot;15&quot; x14ac:dyDescent=&quot;0.25&quot;/&gt;&lt;sheetData&gt;&lt;row r=&quot;1&quot; spans=&quot;1:1&quot; x14ac:dyDescent=&quot;0.25&quot;&gt;&lt;c r=&quot;A1&quot; s=&quot;1&quot;&gt;&lt;f&gt;6*7&lt;/f&gt;&lt;v&gt;42&lt;/v&gt;&lt;/c&gt;&lt;/row&gt;&lt;/sheetData&gt;&lt;sheetProtection algorithmName=&quot;SHA-512&quot; hashValue=&quot;1vd8mFJrCEQ1cOfXy5dZkfZ3vsb5A+FmVy7S3xvY9MDhrCvfPKDgUJtrPL1XTEvoPLaZyeQL21LWeq8fSilt4g==&quot; saltValue=&quot;v5HhQTb+4xMaHY6/lDVUeQ==&quot; spinCount=&quot;100000&quot; sheet=&quot;1&quot; formatCells=&quot;0&quot; formatColumns=&quot;0&quot; formatRows=&quot;0&quot; insertColumns=&quot;0&quot; insertRows=&quot;0&quot; insertHyperlinks=&quot;0&quot; deleteColumns=&quot;0&quot; deleteRows=&quot;0&quot; sort=&quot;0&quot; autoFilter=&quot;0&quot; pivotTables=&quot;0&quot;/&gt;&lt;pageMargins left=&quot;0.7&quot; right=&quot;0.7&quot; top=&quot;0.75&quot; bottom=&quot;0.75&quot; header=&quot;0.3&quot; footer=&quot;0.3&quot;/&gt;&lt;pageSetup paperSize=&quot;9&quot; orientation=&quot;portrait&quot; r:id=&quot;rId1&quot;/&gt;&lt;/worksheet&gt; Let's first fix the formatting for readability: &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt; &lt;worksheet xmlns=&quot;http://schemas.openxmlformats.org/spreadsheetml/2006/main&quot; xmlns:r=&quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships&quot; xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; mc:Ignorable=&quot;x14ac xr xr2 xr3&quot; xmlns:x14ac=&quot;http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac&quot; xmlns:xr=&quot;http://schemas.microsoft.com/office/spreadsheetml/2014/revision&quot; xmlns:xr2=&quot;http://schemas.microsoft.com/office/spreadsheetml/2015/revision2&quot; xmlns:xr3=&quot;http://schemas.microsoft.com/office/spreadsheetml/2016/revision3&quot; xr:uid=&quot;{2838881A-D7EE-4880-9A40-583A7BEB231B}&quot;&gt; &lt;dimension ref=&quot;A1&quot;/&gt; &lt;sheetViews&gt; &lt;sheetView tabSelected=&quot;1&quot; workbookViewId=&quot;0&quot;/&gt; &lt;/sheetViews&gt; &lt;sheetFormatPr defaultRowHeight=&quot;15&quot; x14ac:dyDescent=&quot;0.25&quot;/&gt; &lt;sheetData&gt; &lt;row r=&quot;1&quot; spans=&quot;1:1&quot; x14ac:dyDescent=&quot;0.25&quot;&gt; &lt;c r=&quot;A1&quot; s=&quot;1&quot;&gt; &lt;f&gt;6*7&lt;/f&gt; &lt;v&gt;42&lt;/v&gt; &lt;/c&gt; &lt;/row&gt; &lt;/sheetData&gt; &lt;sheetProtection algorithmName=&quot;SHA-512&quot; hashValue=&quot;1vd8mFJrCEQ1cOfXy5dZkfZ3vsb5A+FmVy7S3xvY9MDhrCvfPKDgUJtrPL1XTEvoPLaZyeQL21LWeq8fSilt4g==&quot; saltValue=&quot;v5HhQTb+4xMaHY6/lDVUeQ==&quot; spinCount=&quot;100000&quot; sheet=&quot;1&quot; formatCells=&quot;0&quot; formatColumns=&quot;0&quot; formatRows=&quot;0&quot; insertColumns=&quot;0&quot; insertRows=&quot;0&quot; insertHyperlinks=&quot;0&quot; deleteColumns=&quot;0&quot; deleteRows=&quot;0&quot; sort=&quot;0&quot; autoFilter=&quot;0&quot; pivotTables=&quot;0&quot;/&gt; &lt;pageMargins left=&quot;0.7&quot; right=&quot;0.7&quot; top=&quot;0.75&quot; bottom=&quot;0.75&quot; header=&quot;0.3&quot; footer=&quot;0.3&quot;/&gt; &lt;pageSetup paperSize=&quot;9&quot; orientation=&quot;portrait&quot; r:id=&quot;rId1&quot;/&gt; &lt;/worksheet&gt; We can see that, as expected, all the information from cell A1 is still in the worksheet: &lt;c r=&quot;A1&quot; s=&quot;1&quot;&gt; &lt;f&gt;6*7&lt;/f&gt; &lt;v&gt;42&lt;/v&gt; &lt;/c&gt; But more importantly, we can also find the following XML tag: &lt;sheetProtection algorithmName=&quot;SHA-512&quot; hashValue=&quot;1vd8mFJrCEQ1cOfXy5dZkfZ3vsb5A+FmVy7S3xvY9MDhrCvfPKDgUJtrPL1XTEvoPLaZyeQL21LWeq8fSilt4g==&quot; saltValue=&quot;v5HhQTb+4xMaHY6/lDVUeQ==&quot; spinCount=&quot;100000&quot; sheet=&quot;1&quot; formatCells=&quot;0&quot; formatColumns=&quot;0&quot; formatRows=&quot;0&quot; insertColumns=&quot;0&quot; insertRows=&quot;0&quot; insertHyperlinks=&quot;0&quot; deleteColumns=&quot;0&quot; deleteRows=&quot;0&quot; sort=&quot;0&quot; autoFilter=&quot;0&quot; pivotTables=&quot;0&quot;/&gt; So, what if we remove the entire SheetProtection tag from the xml file? Automating the password removal process We already found one of the advantages of using a text editor like Emacs. In this case we where able to edit a text file within an archived file without unzipping and re-zipping the file. Otherwise (in Windows), we would need to: change the file format from .xlsx file to .zip unzip the file modify the .xml file zip the entire directory change the resulting archives file format from .zip file to .xlsx And these last parts can already lead to issues. The standard zip archiving settings from Windows differ from the default archiving settings from an .xlsx file, and using these causes the resulting .xlsx file to be invalid. One of the other major advantages with Emacs is that, practically everything the user can do, can be automated in elisp. For example: we can call C-h k &lt;enter&gt; in the .xlsx buffer in Emacs to find the function called when trying to open the corresponding .xml file on that line: RET (translated from &lt;return&gt;) runs the command archive-extract (found in archive-mode-map), which is an interactive compiled Lisp function in ‘arc-mode.el’. It is bound to RET, e..f, &lt;mouse-2&gt;, &lt;menu-bar&gt; &lt;immediate&gt; &lt;find-file&gt;. (archive-extract &amp;optional OTHER-WINDOW-P EVENT) In archive mode, extract this entry of the archive into its own buffer. [back] Using this info we can write a script to perform exactly the same actions in Emacs as would be done manually. But emacs-lisp is also a full-fledged programming language, so we can extend the 'macro' with loops, if/else cases, etc.. The result of this work is the following interactive emacs-lisp function: (defun excel-remove-sheet-protection () &quot;Remove sheet protection from an Excel xlsx file.&quot; (interactive) (find-file (read-file-name &quot;Enter xlsx file path/name: &quot;)) ;open excel file as zip-folder (beginning-of-buffer) (while (condition-case nil ;try to do this for all sheets (search-forward-regexp &quot;xl/worksheets/sheet.*?\\.xml&quot;) (error nil)) ;try to move cursor to next sheet.xml (let ((current_xml_point (point))) ;store the current sheet ;; open the sheet and remove the &quot;sheetprotection&quot; xml tag (archive-extract) (beginning-of-buffer) (while (re-search-forward &quot;&lt;sheetprotection.*?&gt;&quot; nil t) (replace-match &quot;&quot;)) (save-buffer) (kill-buffer) (goto-char current_xml_point)))) ;put cursor at last sheet When calling this function (by M-x excel-remove-sheet-protection), Emacs first asks the user for a path to the .xlsx file. Emacs will then open this file, and for each sheet in the Excel file it will open the corresponding .xml file and remove the sheetprotection tag. The result after calling this function is that, after a few seconds of runtime, all the password sheet protections are removed from the Excel file."},{"title":"Generating juggling siteswaps","description":"\"Generating juggling patterns in Julia using graph theory.\"","tags":["programming","Julia","juggling"],"slug":"generating-juggling-siteswaps","html":"Link to Jupyter notebook"},{"title":"Automatic differentiation & dual numbers","description":"\"Implementing automatic differentiation in Julia using dual numbers.\"","tags":["programming","Julia"],"slug":"automatic-differentiation-dual-numbers","html":"Link to Jupyter notebook"},{"title":"Debunking the Kubie 'energy saving device'","description":"\"Debunking the Kubie 'energy saving device'.\"","tags":["scam"],"slug":"debunking-the-kubie-energy-saving-device","html":"Introduction Last week someone asked me to take a look if this &quot;energy saving device&quot; from Power Quality Europe could be an option for their house. This device, the Kubie, is a device which in the words of its manufacturer saves a minimum of 8% and up to 20% on your electricity bill. This post is a brief breakdown of why the manufacturer's claims don't take into account real-life usage, and why this device practically increases the electricity usage instead of decresing it. What is the Kubie Within Europe the mains voltage is specified as being 230VAC+10%/-6%, which means the voltage is allowed to be anywhere between 216V and 253V. Most devices however can handle slightly lower voltages, for example between 207V and 253V. Or in the case of devices with a switch mode power supply anywhere between 90V and 250V (which means that they, for example, also can be used in the US without any modifications). The Kubie is, in practice, a glorified transformer which is placed directly behind the main circuit breaker of your house. This device outputs a 218-220V voltage for all appliances in your home, independent of the tolerances of the mains voltage supplied to your house, and the idea behind this device is that, by Ohm's law, devices will use less current with this device installed since the voltage to that device is limited, and therefore also will use less power. The following example calculation is given on their website: A 230V, 2000W device has a resistance of $\\frac{230(V)^2}{2000(W)} = 26.45(\\Omega)$. When the voltage is reduced to 218V it will consume $\\frac{218(V)^2}{26.45(\\Omega)} = 1797(W)$ The power saving is therefore $1 - \\frac{1797(W)}{2000(W)} \\cdot 100 % \\approx 10.2%$ A second calculation, but now with a 240V mains reference voltage results in an apparent saving of $1 - \\frac{1797(W)}{(\\frac{240(V)^2}{26.45(Omega)})} \\cdot 100 % \\approx 17.5%$. remark: the percentages on the site are slightly different since they further calculate the savings into Euro's, which after rounding down to cents adds some rounding errors. In the example they do correctly mention that multiple factors will influence the actual amount saved, but in their words &quot;...but this calculation example gives a good view of the possible savings...&quot; which people will likely interpret as it being a realistic example (which it isn't). Their claims Translated from their brochure: &quot;Depending on the new voltage level and the used equipment, a total power saving between 10 and 20% will be realized!&quot; Later on in their brochure they made return of interest calculations for several types of houses, where they assume this device saves 13.8% of the total power consumption in that house. Validating their claims In order to check their claims I want to look at 2 things: On which devices it actually can have an energy-saving effect. Power consumption of the Kubie. Effected devices First of all, lets take a look on which devices this technique could and will not work. Roughly speaking a device can fall in one of two categories: constant-impedance constant-power With constant-impedance devices the current draw decreases when the voltage decreases, according to Ohms law. These are mostly devices where a power-consumer, such as a motor or heater, are directly connected to the mains power. Examples include: heater electric stove fridge incandescent lights These devices can often be recognized by only working on a small range of input voltages (e.g. 230V\\plusmn10{=latex}%) or having a voltage selection switch. Constant-power devices often have a switch-mode power supply, or similar, and these devices practically consume as much current as the electronics behind the power supply requires, independent on the voltage. These devices can therefore often be recognized by being able to work on a wide range of input voltages (e.g. 90V-250V). Examples include: TV Computer Phone charger LED lights Electric car charger Lowering the supply voltage to a constant-power device practically doesn't have any effect on it's power usage, since it automatically draws more current to compensate for the power loss. Lowering the supply voltage to a constant-impedance device does influence the instantaneous power draw, but more often than not it doesn't have any effect on your electricity bill. The reason is that most of these devices are have a control-loop. Take, for example, an electric heater. Let's assume it tries to keep a room at a set temperature, and the room looses heat to the outside at a rate of 100W. E.g. the heater needs to provide an average power of 100W to keep the room at the set temperature. When the heater is able to supply 1000W, then it will be on for $\\frac{100(W)}{1000(W)} = 10%$ of the time. When the heater is only able to supply 800W, for example by lowering its supply voltage, then it will be on for $\\frac{100(W)}{800(W)} = 12.5%$ of the time. In practice it just doesn't matter how much the heaters instantaneous power is, what counts is the average power it needs to keep the room at temperature. Another example is an electric kettle. The kettle needs a certain amount of energy to boil a certain amount of water, and in practice it doesn't matter if it is heated by a 1500W or 2000W kettle. The larger-power kettle does its job in a shorter amount of time, and they practically both use the same amount of energy (power × time) to bring the same amount of water to a boil. Practically all devices that heat or cool something work this way, so the Kubie also doesn't have any practical effect on: Fridges Electric heaters Coffee machines Air-conditioners Electric irons etc. It also doesn't have effect on part of the power draw from devices which both heat and have motors/pumps, such as: Dishwashers Washing machines Clothes dryers And finally there are also devices which don't have a build-in controller, but where, in practice, the user acts as the controller. One example of this is a vacuum cleaner. In principle the power it draws depends on the input voltage, but also on the suction power dial on the vacuum itself. So: When the input power of the vacuum is lowered, the user can turn the dial up to increase the suction power back again (up to a limit), and The user can dial down the vacuum for less power use for the cost of less suction power. Another example is a hair dryer, where the user chooses its power and duration, until its task is performed. And lowering the maximum power to the device doesn't change that much on the overall energy usage; it is just used until it has provided enough energy to dry hair, which takes longer with lower power. So, what percentage of electricity use is actually positively influenced by the Kubie? Let's use this table from the U.S. Energy Information Administration as baseline1: End use Share of total Energy saved by lowering supply voltage? End use Share of total Energy Saved By Lowering Supply Voltage? Space cooling 16% No Space heating 15% No Water heating 12% No Refrigeration 6% No Clothes dryers 5% Partly Lighting 4% No (assuming LED lights) Televisions and related equipment 4% No Computers and related equipment 2% No Furnace fans and boiler circulation pumps 2% Yes Freezers 1% No Cooking 1% No2 Clothes washers 1% Partly Dishwashers 1% Partly Other uses 31% Depends So we can see that, by far, most of the electric energy used in a household will not be influenced at all by lowering the mains voltage. All by all I would be very surprised if more than 10% of the energy used in a household can actually be influenced by this device. So, if we assume the nominal mains voltage is 230V, and the device saves 10.2% on the 10% of devices it actually has effect on, then this device will only save 1% of total energy usage. Its effect will even get less significant in the future, as more power will be drawn by unaffected devices: Electric cars get more and more common. Use of natural gas will decline, and therefore more people will use electric heating and cooking. The number of air-conditioners in Europe rising due to climate change. Power consumption of the Kubie itself Like mentioned before: the Kubie is practically just a transformer, and like with each transformer it doesn't have a 100% efficiency. The data-sheet in the brochure states that the power loss in the device at zero-load is 23W. Note that, in comparison to a lot of other devices in your home, this device is on 24/7. Given that the average yearly power consumption of a household is $3500(kWh)$ 3, these losses already account for an added $\\frac{23(W) \\cdot 1(yr)}{3500(kWh)} \\approx 5.6 %$ on the total household power consumption. This is even without taking into account other additional power losses caused by the device, such as: The load-dependent power losses of the device itself. Wiring power losses due to higher current consumption of constant-power devices. Bottom line The story given by the company on their website and in their brochure pains a nice picture, where: All calculations seem to assume that all devices benefit from a lower supply voltage. The device only saves power, but doesn't consume power itself. Both assumptions are plain false, and the manufacturer should know this. They do mention that, certain types of devices, will not benefit from this device, but they fail to mention that it is by far the majority of devices which will not benefit. They also do give the efficiency values of their device (although difficult to find), but other than those 2 rows (out of 33 in the data-sheet) they keep these efficiency losses out of all their calculations. The calculations the company provides in their return-of-interest calculations assume 13.8% power saving. In their claims this is the average power savings by 100 customers. This is already more than the saving of 'an ideal' (for them) device being powered from the Kubie instead of 230V (which results in a 10.2% lower power draw). My gut feeling, however, is that they just asked 100 customers what their mains voltage was (which would in this case be in the 235V range), used that voltage, and calculated as if each single device is positively effected by this device, and didn't take into account the efficiency losses in the device itself. If we actually take a look at our calculations, where we do take into account that most devices do not benefit and that the Kubie itself isn't 100% efficient, we see that: The energy saved in other appliances by this device is somewhere in the 1% range of total household energy consumption, if not lower. The efficiency power losses from the device itself are, at least, 5.6% of total household energy consumption4. This rough estimation therefore shows that this device doesn't save power, but adds an additional $5.6% - 1% = 4.6%$ to your total energy bill. Quite the change from their &quot;Depending on the new voltage level and the used equipment, a total power saving between 10 and 20% will be realized!&quot; claim. If we then calculate further, based on the same $0.26\\frac{\\unicode{0x20AC}}{kWh}$ energy price and $0.572\\frac{kg}{kWh}$ CO2 emission factor they use in their return of investment calculations, we see that, by having this device installed, your annual bill goes up by an average of: $3500(\\frac{kWh}{yr}) \\cdot 4.6(\\%) \\cdot 0.26(\\frac{\\unicode{0x20AC}}{kWh}) \\approx 42(\\frac{\\unicode{0x20AC}}{yr})$ and you will cause an average of: $3500(\\frac{kWh}{yr}) \\cdot 4.6(\\%) \\cdot 0.572(\\frac{kg}{kWh}) \\approx 90(\\frac{kg}{yr})$ of CO2 to be generated in the atmosphere. And that all for a bit more more than €600 to actually have that device installed in your home5. Closing words Personally I'm getting sick and tired of these kinds of snake-oil companies who, either by malice or just gross incompetence, try to sell stuff under the flag of &quot;green energy&quot;, &quot;power saving&quot;, etc.. More often than not these devices do more harm than good, and this device also seems to be one of the latter ones. In effect you could say that these kinds of companies are actively working against the environment, since all they seem to do is: selling junk that doesn't benefit the environment at all, and more often than not does the opposite. taking away money people have budgeted for energy saving improvement, causing them to not have that money available to make change that actually are beneficial for the environment. So what did this company already caused? Apparently they already sold 1300 of these devices6. Assuming each of these units now has been running for 3 years on average, then by just having these units installed they already caused in the range of $90(\\frac{kg}{yr}) \\cdot 3(yr) \\cdot 1300 \\approx 0.35\\cdot10^6(kg)$ of CO2 to be emitted in the air. Let that sink in; roughly 350 metric tonnes of CO2. And let's not even talk about what they will eventually have caused over the manufacturers claimed 40 year lifetime... And for all people who still want to have some kind of &quot;whizzbang magical black magic woo-woo device&quot; in their home to save power: During a tear-down of a device strikingly similar in function our great friend BigClive proposed to just install his Energy Saver 300+. It's way cheaper, and likely a lot better for the environment, than this pile of garbage. Some percentages will differ between the US and the Netherlands. Air-conditioning is, for example, a lot less present in Dutch households. But this was the best data I could find about the share of power between different household appliances. ↩ Assuming the user can actually cook, and doesn't just continuously put the furnace on full power. ↩ https://www.engie.nl/product-advies/gemiddeld-energieverbruik/gemiddeld-stroomverbruik ↩ Yes, in principle the heating of this device can cause the heaters in your house to work less, but A: part of the time you don't want to have your house heated but cooled, and B: in practice it requires more energy to extract heat from somewhere than it is to heat it. Let's just assume therefore that the heat energy added by this device doesn't change the overall average energy use. ↩ €479 unit cost + €135 installation cost. ↩ https://www.deondernemer.nl/innovatie/henk-dinkelaar-kubie-tuv-stroom-laag-energieverbruik~3212970 ↩"},{"title":"cram-snap","description":null,"tags":[],"slug":"README","html":"Simple cheatsheet template for Typst that allows you to snap a quick picture of essential information and cram it into a useful cheatsheet format. Usage You can use this template in the Typst web app by clicking &quot;Start from template&quot; on the dashboard and searching for cram-snap. Alternatively, you can use the CLI to kick this project off using the command typst init @preview/cram-snap Typst will create a new directory with all the files needed to get you started. Configuration This template exports the cram-snap function with the following named arguments: title: Title of the document subtitle: Subtitle of the document icon: Image that appears next to the title column-number: Number of columns fill-color : rgb color of filled rows (defaults to #F2F2F2) stroke-color rgb color of the stroke under each heading (defaults to 21222C) The theader function is a wrapper around the table.header function that creates a header and takes colspan as argument to span the header across multiple table columns (by default it spans across two) If you want to change an existing project to use this template, you can add a show rule like this at the top of your file: #import &quot;@preview/cram-snap:0.2.2&quot;: * #set page(paper: &quot;a4&quot;, flipped: true, margin: 1cm) #set text(font: &quot;Arial&quot;, size: 11pt) #show: cram-snap.with( title: [Cheatsheet], subtitle: [Cheatsheet for an amazing program], icon: image(&quot;icon.png&quot;), column-number: 3, ) // Use it if you want different table columns (the default are: (2fr, 3fr)) #set table(columns: (2fr, 3fr, 3fr)) #table( theader(colspan: 3)[Great heading that is really looooong], [Closing the program], [Type `:q`], [You can also type `QQ`] )"},{"title":"About","description":null,"tags":[],"slug":"about","html":"About me Mechatronics engineer, juggler, off-road unicyclist, boardgame enthausiast, metalhead, ... Links GitHub About this website This website is generated using the Marmite static site generator."}]